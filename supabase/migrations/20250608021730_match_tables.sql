create table public.matches (
    id bigint generated by default as identity primary key,
    topic text not null unique
);

alter table public.matches enable row level security;

create table public.match_users (
  profile_id uuid references public.profiles (id),
  match_topic text references public.matches (topic),
  created_at timestamptz default current_timestamp,
  is_challenger boolean default false,
  is_challenged boolean default false
);

alter table public.match_users enable row level security;

-- Create trigger function to add match creator as challenger
create or replace function public.handle_new_match()
returns trigger as $$
begin
  insert into public.match_users (profile_id, match_topic, is_challenger)
  values (auth.uid(), new.topic, true);
  return new;
end;
$$ language plpgsql security definer;

-- Create trigger on matches table
create trigger on_match_created
  after insert on public.matches
  for each row
  execute function public.handle_new_match();

-- Policy to allow match owners to add users
create policy "match owners can add users"
on "public"."match_users"
for insert
to authenticated
with check (
  exists (
    select 1
    from match_users as mu
    where mu.profile_id = auth.uid()
      and mu.match_topic = match_topic
      and mu.is_challenger = true
  )
);

create policy "match members can select match users"
on "public"."match_users"
for select
to authenticated
using ( true );
